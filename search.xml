<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xv6 book 笔记</title>
      <link href="/2024/09/de32e36c091a.html"/>
      <url>/2024/09/de32e36c091a.html</url>
      
        <content type="html"><![CDATA[<h1 id="xv6-book"><a href="#xv6-book" class="headerlink" title="xv6 book"></a>xv6 book</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h2 id="chapter-2"><a href="#chapter-2" class="headerlink" title="chapter 2"></a>chapter 2</h2><h3 id="operating-system-organization"><a href="#operating-system-organization" class="headerlink" title="operating system organization"></a>operating system organization</h3><p>There are three key requirements must fulfilled：multiplexing, isolation, and interaction.</p><p>This chapter will demonstrate above three requirements by providing an overview of xv6’s process (unit of isolation) and the creation of the first process when xv6 starts.</p><p>XV6 is written in ‘LP64’C, which means long (L) and pointers (P) in the C programming language are 64 bits, but an int is 32 bits.</p><h3 id="2-1-abstracting-physical-resources"><a href="#2-1-abstracting-physical-resources" class="headerlink" title="2.1 abstracting physical resources"></a>2.1 abstracting physical resources</h3><p>Abstracting physical resources is very necessary.</p><h3 id="2-2-User-mode-supervisor-mode-and-system-calls"><a href="#2-2-User-mode-supervisor-mode-and-system-calls" class="headerlink" title="2.2 User mode, supervisor mode, and system calls"></a>2.2 User mode, supervisor mode, and system calls</h3><p>Operating system need strong isolation，it means os or other applications can’t fail when a application makes a mistake.Instead,the os should be able to clean up the failed application and continue running other applications.Therefore, applications can’t modify os’data, instructions and access other applications’ memory.</p><p>CPUs have some support for strong isolation. For example, RISC-V has three modes in which the CPU can execute instructions: machine mode, supervisor mode, and user mode.</p><pre><code>machine mode:     - have full privilege;    - a CPU starts in machine mode;    - mostly intended for setting up the computer during boot;supervisor mode:    - the CPU is allowed to execute privileged instructions(特权指令);    - if an app in user mode attempts to execute a privileged instructions,CPU     doesn&#39;t execute the instruction,but switches to supervisor mode so that     supervisor-mode code can terminate the application, because it did     something it shouldn’t be doing;    - some app running in supervisor mode(also can execute privileged     instructions)said to be running in kernel space is called the kernel;user mode:    - An application can execute only user-mode instructions and is said to be     running in user space;    - an application in user mode cannot invoke a kernel function directly;</code></pre><p>An application cannot invoke a kernel function directly.<br>CPUs provide a special instruction(‘ecall’ in RISC-V) that switches the CPU from user mode to supervisor mode(and enters the kernel).</p><p>Once the CPU has switched to supervisor mode, the kernel can then validate the arguments of the system call (e.g., check if the address passed to the system call is part of the application’s memory), decide whether the application is allowed to perform the requested operation (e.g., check if the application is allowed to write the specified file), and then deny it or execute it. It is important that the kernel control the entry point for transitions to supervisor mode.if the application could decide the kernel entry point, a malicious application could enter the kernel at a point where the validation of arguments is skipped.</p><h3 id="2-3-Kernel-organization"><a href="#2-3-Kernel-organization" class="headerlink" title="2.3 Kernel organization"></a>2.3 Kernel organization</h3><p>CPUs have three running mode，then it was a question that which part of OS should run in supervisor mode. There are two options to choose：entire operating system resides in the kernel (monolithic kernel) or part of the operating system is in the kernel, and the rest is on the outside(microkernel). xv6 is monolithic.</p><pre><code>monolithic kernel：    Property：    - the entire operating system consists of a single program running with full hardware privilege.    - is convenient for OS designer.    - is easier for different part of OS to cooperate.    Downside：    - interactions in the OS are often complex.    - fatal！a litle error could cause the kernel to fail and the computer stops working, and thus all applications fail too.microkernel:    Property：    - minimize the amount of operating system code that runs in supervisor mode.    - execute the bulk of the operating system in user mode.    - OS services running as processes in user mode are called servers(such as File server).    - kernel provides a an inter-process communication mechanism for user-mode processes.    - the kernel interface consists of a few low-level functions for starting applications, sending messages, accessing device hardware, etc.</code></pre><ul><li></li></ul><p>![[..&#x2F;..&#x2F;Resources&#x2F;Pasted image 20241017184826.png]]</p><h3 id="2-4-Code-xv6-organization"><a href="#2-4-Code-xv6-organization" class="headerlink" title="2.4 Code: xv6 organization"></a>2.4 Code: xv6 organization</h3><ul><li><p>The xv6 kernel source is in the kernel&#x2F;sub-directory.</p></li><li><p>The source is divided into files, following a rough notion of modularity.<br>![[..&#x2F;..&#x2F;Resources&#x2F;Pasted image 20241017195915.png]]</p></li><li><p>The inter-module interfaces are defined in defs.h (kernel&#x2F;defs.h).</p></li></ul><h3 id="2-5-Process-overview"><a href="#2-5-Process-overview" class="headerlink" title="2.5 Process overview"></a>2.5 Process overview</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> OS </tag>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.1810 学习资料</title>
      <link href="/2024/07/a009a5ae80d3.html"/>
      <url>/2024/07/a009a5ae80d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-1810-课程资料-amp-学习记录"><a href="#6-1810-课程资料-amp-学习记录" class="headerlink" title="6.1810 课程资料&amp;学习记录"></a>6.1810 课程资料&amp;学习记录</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><strong><a href="https://pdos.csail.mit.edu/6.828/2024/">官网</a></strong><br><strong>教材：<a href="https://pdos.csail.mit.edu/6.828/2024/xv6/book-riscv-rev4.pdf">xv6 book</a></strong><br><strong>B站视频：<a href="https://www.bilibili.com/video/BV19k4y1C7kA?p=1&vd_source=663806180f4de3dcdba03f194f1b2c9e">MIT 6.S081 2020 操作系统 [中英文字幕]</a></strong></p><h2 id="LEC-1-rtm"><a href="#LEC-1-rtm" class="headerlink" title="LEC 1 (rtm):"></a>LEC 1 (rtm):</h2><h3 id="Introduction-and-examples-handouts-xv6-book-2020-video"><a href="#Introduction-and-examples-handouts-xv6-book-2020-video" class="headerlink" title="Introduction and examples (handouts: xv6 book; 2020: video)"></a><a href="https://pdos.csail.mit.edu/6.828/2021/slides/6s081-lec-intro.pdf">Introduction</a> and examples (handouts: xv6 book; 2020: video)</h3><p>Preparation: Read chapter 1 (for your amusement: Unix)<br>Assignment: <a href="https://pdos.csail.mit.edu/6.828/2024/labs/util.html">Lab util: Unix utilities</a></p><h3 id="任务列表："><a href="#任务列表：" class="headerlink" title="任务列表："></a>任务列表：</h3><ul><li><input checked="" disabled="" type="checkbox"> Read chapter 1</li><li><input checked="" disabled="" type="checkbox"> video:Lecture 1 - Introduction and Examples</li><li><input checked="" disabled="" type="checkbox"> Lab util: Unix utilities<ul><li><input checked="" disabled="" type="checkbox"> Boot xv6</li><li><input checked="" disabled="" type="checkbox"> sleep</li><li><input checked="" disabled="" type="checkbox"> pingpong</li><li><input checked="" disabled="" type="checkbox"> primes</li><li><input checked="" disabled="" type="checkbox"> find</li><li><input checked="" disabled="" type="checkbox"> xargs</li></ul></li></ul><h2 id="LEC-2-fk"><a href="#LEC-2-fk" class="headerlink" title="LEC 2 (fk):"></a>LEC 2 (fk):</h2><h3 id="C-in-xv6-slides-c-gdb-and-examples"><a href="#C-in-xv6-slides-c-gdb-and-examples" class="headerlink" title="C in xv6, slides,c, gdb,and examples"></a><a href="https://pdos.csail.mit.edu/6.828/2021/lec/6S081-Intro-to-C-Fa21.pdf">C in xv6</a>, <a href="https://pdos.csail.mit.edu/6.828/2024/lec/l-c_slides.pdf">slides</a>,<a href="https://pdos.csail.mit.edu/6.828/2021/lec/6S081-Intro-to-C-Fa21.pdf">c</a>, <a href="https://pdos.csail.mit.edu/6.828/2021/lec/gdb_slides.pdf">gdb</a>,and examples</h3><p>Preparation: 2.9 (Bitwise operators) and 5.1 (Pointers and addresses) through 5.6 (Pointer arrays) and 6.4 (pointers to structures) by Kernighan and Ritchie (K&amp;R)</p><h3 id="任务列表：-1"><a href="#任务列表：-1" class="headerlink" title="任务列表："></a>任务列表：</h3><ul><li><input checked="" disabled="" type="checkbox"> C in xv6</li><li><input disabled="" type="checkbox"> slides</li><li><input disabled="" type="checkbox"> c</li><li><input disabled="" type="checkbox"> gdb</li></ul><h2 id="LEC-3-fk"><a href="#LEC-3-fk" class="headerlink" title="LEC 3 (fk):"></a>LEC 3 (fk):</h2><h3 id="OS-design-OS-organization-and-system-calls-2020-video"><a href="#OS-design-OS-organization-and-system-calls-2020-video" class="headerlink" title="OS design,OS organization and system calls (2020: video)"></a>OS design,<a href="https://pdos.csail.mit.edu/6.828/2021/slides/6s081-lec-osorg.pdf">OS organization and system calls</a> (2020: video)</h3><p>Preparation: Read chapter 2 and xv6 code: <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/proc.h">kernel&#x2F;proc.h</a>, <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/defs.h">kernel&#x2F;defs.h</a>, <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/entry.S">kernel&#x2F;entry.S</a>, <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/main.c">kernel&#x2F;main.c</a>, <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/user/initcode.S">user&#x2F;initcode.S</a>, <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/user/init.c">user&#x2F;init.c</a>, and skim <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/proc.c">kernel&#x2F;proc.c</a> and <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/exec.c">kernel&#x2F;exec.c</a><br>Assignment: <a href="https://pdos.csail.mit.edu/6.828/2024/labs/syscall.html">Lab syscall: System calls(24)</a><a href="https://pdos.csail.mit.edu/6.828/2021/labs/syscall.html">21</a></p><h3 id="任务列表：-2"><a href="#任务列表：-2" class="headerlink" title="任务列表："></a>任务列表：</h3><ul><li><input disabled="" type="checkbox"> Read chapter 2 (2024&#x2F;10&#x2F;1-)</li><li><input disabled="" type="checkbox"> video:Lecture 3 - OS Organization and System Calls</li><li><input disabled="" type="checkbox"> Lab syscall: System calls<ul><li><input disabled="" type="checkbox"> Using gdb</li><li><input disabled="" type="checkbox"> System call tracing</li><li><input disabled="" type="checkbox"> Attack xv6</li><li><input disabled="" type="checkbox"> Sysinfo</li></ul></li></ul><p>LEC 4 (fk): page tables<br>Preparation: Read Chapter 3 and kernel&#x2F;memlayout.h, kernel&#x2F;vm.c, kernel&#x2F;kalloc.c, kernel&#x2F;riscv.h, and kernel&#x2F;exec.c</p><p>LEC 4 (ab): Page tables (2020: notes, boards, video)<br>Preparation: Read Chapter 3 and kernel&#x2F;memlayout.h, kernel&#x2F;vm.c, kernel&#x2F;kalloc.c, kernel&#x2F;riscv.h, and kernel&#x2F;exec.c</p><p>LEC 5 (rtm): System call entry&#x2F;exit<br>Preparation: Read Chapter 4, except 4.6 and kernel&#x2F;riscv.h, kernel&#x2F;trampoline.S, and kernel&#x2F;trap.c<br>Assignment: Lab pgtbl: Page tables</p><p>LEC 5 (TAs): GDB, calling conventions and stack frames RISC-V (2020: notes, boards, video)<br>Preparation: Read Calling Convention<br>Assignment: Lab pgtbl: Page tables</p><p>LEC 6 (TAs): GDB Calling conventions<br>Preparation: Read Calling Convention</p><p>LEC 6 (ab): Isolation &amp; system call entry&#x2F;exit (2020: notes, video)<br>Preparation: Read Chapter 4, except 4.6 and kernel&#x2F;riscv.h, kernel&#x2F;trampoline.S, and kernel&#x2F;trap.c</p><p>LEC 7 (fk): Page faults (slides)<br>Preparation: Read Section 4.6<br>Assignment: Lab traps: Traps</p><p>LEC 7 (ab): Page faults (2020: notes, boards, video)<br>Preparation: Read Section 4.6<br>Assignment: Lab traps: Traps</p><p>LEC 8 (fk): Q&amp;A labs (slides)</p><p>LEC 8 (ab): Q&amp;A labs</p><p>LEC 9 (fk): Device drivers<br>Preparation: Read Chapter 5 and kernel&#x2F;kernelvec.S, kernel&#x2F;plic.c, kernel&#x2F;console.c, kernel&#x2F;uart.c, kernel&#x2F;printf.c<br>Assignment: Lab cow: Copy-on-write fork</p><p>LEC 9 (ab): Interrupts (2020: notes, boards, video)<br>Preparation: Read Chapter 5 and kernel&#x2F;kernelvec.S, kernel&#x2F;plic.c, kernel&#x2F;console.c, kernel&#x2F;uart.c, kernel&#x2F;printf.c<br>Assignment: Lab cow: Copy-on-write fork</p><p>LEC 10 (fk): Locking<br>Preparation: Read “Locking” with kernel&#x2F;spinlock.h and kernel&#x2F;spinlock.c</p><p>LEC 10 (ab): Multiprocessors and locking (2020: notes, boards, video)<br>Preparation: Read “Locking” with kernel&#x2F;spinlock.h and kernel&#x2F;spinlock.c</p><p>LEC 11 (rtm): Scheduling 1<br>Preparation: Read “Scheduling” through Section 7.4, and kernel&#x2F;proc.c, kernel&#x2F;swtch.S</p><p>LEC 11 (ab): Scheduling 1 (2020: notes, video)<br>Preparation: Read “Scheduling” through Section 7.4, and kernel&#x2F;proc.c, kernel&#x2F;swtch.S</p><p>LEC 12 (rtm): Coordination, code<br>Preparation: Read remainder of “Scheduling”, and corresponding parts of kernel&#x2F;proc.c, kernel&#x2F;sleeplock.c</p><p>LEC 12 (ab): Scheduling 2 (2020: notes, code, video)<br>Preparation: Read remainder of “Scheduling”, and corresponding parts of kernel&#x2F;proc.c, kernel&#x2F;sleeplock.c<br>Assignment: Lab thread: Multithreading</p><p>LEC 13 (fk): File systems (slides)<br>Preparation: Read kernel&#x2F;bio.c, kernel&#x2F;fs.c, kernel&#x2F;sysfile.c, kernel&#x2F;file.c and “File system” (except for the logging sections)</p><p>LEC 13 (ab): Q&amp;A labs</p><p>Midterm open book and notes<br>scope: Lectures 1 through 12, labs through lab cow<br>practice: previous quizzes.<br>Assignment: Lab net: Network driver</p><p>LEC 14 (fk): Crash recovery (slides)<br>Preparation: Read kernel&#x2F;log.c and the logging sections of the “File system” chapter</p><p>LEC 14 (ab): File systems (2020: notes, boards, video)<br>Preparation: Read kernel&#x2F;bio.c, kernel&#x2F;fs.c, kernel&#x2F;sysfile.c, kernel&#x2F;file.c and “File system” (except for the logging sections)<br>Assignment: Lab net: Network driver</p><p>LEC 15 (rtm): File system performance and fast crash recovery<br>Preparation: Read Journaling the Linux ext2fs Filesystem (1998)</p><p>LEC 15 (ab): Crash recovery (2020: notes, boards, video)<br>Preparation: Read kernel&#x2F;log.c and the logging sections of “File system”</p><p>Hacking day: no class meeting; work on the lab<br>Assignment: Lab lock: Parallelism&#x2F;locking</p><p>LEC 16 (fk): Virtual memory for applications (baker example) (slides)<br>Preparation: Read Virtual Memory Primitives for User Programs (1991)<br>Assignment: Lab fs: File system</p><p>LEC 16 (ab): File system performance and fast crash recovery (2020: notes, video)<br>Preparation: Read Journaling the Linux ext2fs Filesystem (1998)</p><p>LEC 17 (rtm): OS Organization<br>Preparation: Read The Performance of micro-Kernel-Based Systems (1997)</p><p>LEC 17 (ab): Virtual memory for applications (2020: notes, boards, video) (baker example)<br>Preparation: Read Virtual Memory Primitives for User Programs (1991)</p><p>DROP DATE<br>LEC 18 (rtm): Virtual Machines<br>Preparation: Read Dune: Safe User-level Access to Privileged CPU Features (2012)<br>Hacking day: no class meeting; work on the lab<br>Assignment: Lab mmap: Mmap</p><p>LEC 18 (ab): OS Organization (2020: notes, video)<br>Preparation: Read The Performance of micro-Kernel-Based Systems (1997)<br>Assignment: Lab lock: Parallelism&#x2F;locking</p><p>LEC 19 (fk): Kernels and HLL<br>Preparation: Read the Biscuit paper (2018), FAQ</p><p>LEC 19 (ab): Virtual Machines (2020: notes, video)<br>Preparation: Read Dune: Safe User-level Access to Privileged CPU Features (2012)</p><p>LEC 20 (rtm): Networking<br>Preparation: Read Receive Livelock (1996)</p><p>LEC 20 (ab): Kernels and HLL] (2020: notes, slides, video)<br>Preparation: Read the Biscuit paper (2018), FAQ<br>Assignment: Lab fs: File system</p><p>LEC 21 (rtm): Meltdown<br>Preparation: Read Meltdown (2018)</p><p>LEC 21 (ab): Networking (2020: notes, video)<br>Preparation: Read Receive Livelock (1996)</p><p>Hacking day: no class meeting; work on the lab<br>DUE: Lab fs<br>Assignment: Lab mmap: Mmap</p><p>LEC 22 (rtm): Multi-Core scalability and RCU<br>Preparation: Read RCU paper (2013), FAQ</p><p>LEC 22 (ab): Meltdown (2020: notes, video)<br>Preparation: Read Meltdown (2018)</p><p>LAST DAY OF CLASSES<br>LEC 23 (tbd): Current Research</p><p>LEC 23 (ab): Multi-Core scalability and RCU (2020: notes, video)<br>Preparation: Read RCU paper (2013), FAQ</p><p>LEC 24 (TAs): Current Research: Radiation Tolerance<br>Preparation: Read NASA CALIPSO paper (2006) for background</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
